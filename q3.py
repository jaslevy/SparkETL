"""Outlier_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ly5ttRrYM0MlJlgZdYFZBSaje27yk5gW

#Outlier Detection

## Univariate Outlier Detection
"""

import pandas as pd
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from itertools import combinations
from sklearn.cluster import DBSCAN
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


df = pd.read_csv('prog_book.csv')
df[['Price', 'Number_Of_Pages', 'Rating', 'Reviews']] = df[['Price', 'Number_Of_Pages', 'Rating', 'Reviews']].apply(pd.to_numeric, errors='coerce')
df = df.dropna(subset=['Price', 'Number_Of_Pages', 'Rating', 'Reviews'])

for var in vars:
    plt.figure(figsize=(10, 4))
    q1, q3 = df[var].quantile([0.25, 0.75])
    iqr = q3 - q1
    lower = q1 - 1.5 * iqr
    upper = q3 + 1.5 * iqr
    outliers = df[(df[var] < lower) | (df[var] > upper)][[var, 'Book_title']]
    sns.boxplot(x=df[var])
    plt.title(f'Box Plot of {var} (Outliers Highlighted)')
    plt.show()
    print(f"Outliers in {var}:")
    print(outliers, "\n")

"""## Multivariate Outlier Detection

### Bivariate Outliers Using DBSCAN (eps=1.8, min_samples=4)
"""

df['Type'] = df['Type'].astype(str)
df['Type'] = LabelEncoder().fit_transform(df['Type'])
df = df.dropna(subset=['Price', 'Number_Of_Pages', 'Rating', 'Reviews', 'Type'])
features = ['Price', 'Number_Of_Pages', 'Rating', 'Reviews', 'Type']
scaled = StandardScaler().fit_transform(df[features])
db = DBSCAN(eps=1.8, min_samples=4)
df['Cluster'] = db.fit_predict(scaled)
sns.pairplot(df, hue='Cluster', diag_kind='hist', palette='viridis')
plt.show()
outliers = df[df['Cluster'] == -1]
print("Outliers:")
print(outliers[['Price', 'Number_Of_Pages', 'Rating', 'Reviews', 'Type']].reset_index())
for combo in combinations(features, 2):
    print(f"Outliers for {combo[0]} vs {combo[1]}:")
    print(outliers[[combo[0], combo[1]]].reset_index())

"""### Three Variable Analysis (eps=1.7, min_samples=4)"""

for combo in combinations(features, 3):
    fig = plt.figure(figsize=(10, 7))
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(df[combo[0]], df[combo[1]], df[combo[2]], c=df['Cluster'], cmap='viridis', alpha=0.7, marker='o')
    ax.set_xlabel(combo[0])
    ax.set_ylabel(combo[1])
    ax.set_zlabel(combo[2])
    plt.title(f"Outliers: {combo[0]} vs. {combo[1]} vs. {combo[2]}")
    plt.show()
    print(f"Outliers for {combo[0]} vs. {combo[1]} vs. {combo[2]}:")
    print(outliers[[combo[0], combo[1], combo[2]]].reset_index())